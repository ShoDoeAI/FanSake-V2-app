global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    cluster: '{{ .Values.cluster }}'
    region: '{{ .Values.region }}'

serverFiles:
  prometheus.yml:
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: '{{ .Values.cluster }}'
        region: '{{ .Values.region }}'

    rule_files:
      - /etc/config/recording_rules.yml
      - /etc/config/alerting_rules.yml

    scrape_configs:
    # Kubernetes service discovery
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)

    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

    # MusicConnect specific targets
    - job_name: 'musicconnect-backend'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: ['musicconnect']
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: musicconnect-backend
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics

    - job_name: 'musicconnect-websocket'
      kubernetes_sd_configs:
      - role: endpoints
        namespaces:
          names: ['musicconnect']
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: musicconnect-websocket
      - source_labels: [__meta_kubernetes_endpoint_port_name]
        action: keep
        regex: metrics

    # External targets
    - job_name: 'blackbox'
      metrics_path: /probe
      params:
        module: [http_2xx]
      static_configs:
      - targets:
        - https://musicconnect.com
        - https://api.musicconnect.com
        - https://ws.musicconnect.com
      relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: blackbox-exporter:9115

  recording_rules.yml:
    groups:
    - name: musicconnect_aggregations
      interval: 30s
      rules:
      - record: instance:node_cpu_utilisation:rate1m
        expr: |
          1 - avg without (cpu, mode) (
            rate(node_cpu_seconds_total{mode="idle"}[1m])
          )
      
      - record: instance:node_memory_utilisation:ratio
        expr: |
          1 - (
            node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes
          )
      
      - record: musicconnect:http_request_duration_seconds:p50
        expr: |
          histogram_quantile(0.50,
            sum(rate(http_request_duration_seconds_bucket[5m])) by (job, instance, method, route, le)
          )
      
      - record: musicconnect:http_request_duration_seconds:p95
        expr: |
          histogram_quantile(0.95,
            sum(rate(http_request_duration_seconds_bucket[5m])) by (job, instance, method, route, le)
          )
      
      - record: musicconnect:http_request_duration_seconds:p99
        expr: |
          histogram_quantile(0.99,
            sum(rate(http_request_duration_seconds_bucket[5m])) by (job, instance, method, route, le)
          )

  alerting_rules.yml:
    groups:
    - name: musicconnect_alerts
      rules:
      - alert: HighErrorRate
        expr: |
          sum(rate(http_requests_total{status=~"5.."}[5m])) by (job, instance)
          /
          sum(rate(http_requests_total[5m])) by (job, instance)
          > 0.05
        for: 5m
        labels:
          severity: critical
          team: backend
        annotations:
          summary: "High error rate on {{ $labels.instance }}"
          description: "{{ $labels.job }} {{ $labels.instance }} has error rate of {{ $value | humanizePercentage }}"

      - alert: HighLatency
        expr: |
          musicconnect:http_request_duration_seconds:p95 > 1
        for: 5m
        labels:
          severity: warning
          team: backend
        annotations:
          summary: "High latency on {{ $labels.instance }}"
          description: "95th percentile latency is {{ $value }}s"

      - alert: PodCrashLooping
        expr: |
          rate(kube_pod_container_status_restarts_total[1h]) > 5
        for: 5m
        labels:
          severity: critical
          team: platform
        annotations:
          summary: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is crash looping"
          description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} has restarted {{ $value }} times in the last hour"

      - alert: HighMemoryUsage
        expr: |
          container_memory_usage_bytes{namespace="musicconnect"}
          / container_spec_memory_limit_bytes{namespace="musicconnect"}
          > 0.9
        for: 5m
        labels:
          severity: warning
          team: platform
        annotations:
          summary: "High memory usage in {{ $labels.pod }}"
          description: "Container {{ $labels.container }} in pod {{ $labels.pod }} is using {{ $value | humanizePercentage }} of its memory limit"

      - alert: DatabaseConnectionsHigh
        expr: |
          pg_stat_activity_count{datname="musicconnect"} > 80
        for: 5m
        labels:
          severity: warning
          team: database
        annotations:
          summary: "High number of database connections"
          description: "Database has {{ $value }} active connections"

      - alert: WebSocketConnectionsHigh
        expr: |
          musicconnect_websocket_connections > 10000
        for: 5m
        labels:
          severity: warning
          team: backend
        annotations:
          summary: "High number of WebSocket connections"
          description: "{{ $labels.instance }} has {{ $value }} active WebSocket connections"

alertmanager:
  config:
    global:
      resolve_timeout: 5m
      slack_api_url: 'YOUR_SLACK_WEBHOOK_URL'

    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 12h
      receiver: 'default'
      routes:
      - match:
          severity: critical
        receiver: pagerduty
      - match:
          severity: warning
        receiver: slack

    receivers:
    - name: 'default'
      slack_configs:
      - channel: '#alerts'
        title: 'MusicConnect Alert'
        text: '{{ range .Alerts }}{{ .Annotations.summary }}\n{{ .Annotations.description }}\n{{ end }}'

    - name: 'slack'
      slack_configs:
      - channel: '#alerts'
        send_resolved: true

    - name: 'pagerduty'
      pagerduty_configs:
      - service_key: 'YOUR_PAGERDUTY_SERVICE_KEY'

server:
  persistentVolume:
    enabled: true
    size: 100Gi
  
  retention: "30d"
  
  resources:
    requests:
      cpu: 500m
      memory: 2Gi
    limits:
      cpu: 2000m
      memory: 8Gi

pushgateway:
  enabled: true
  persistentVolume:
    enabled: true
    size: 10Gi

nodeExporter:
  enabled: true

kubeStateMetrics:
  enabled: true