version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: musicconnect-postgres
    environment:
      POSTGRES_DB: musicconnect
      POSTGRES_USER: musicconnect
      POSTGRES_PASSWORD: musicconnect_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U musicconnect"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - musicconnect

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: musicconnect-redis
    command: redis-server --requirepass musicconnect_dev_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - musicconnect

  # Backend API
  backend:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.backend
    container_name: musicconnect-backend
    environment:
      NODE_ENV: development
      PORT: 8080
      DATABASE_URL: postgresql://musicconnect:musicconnect_dev_password@postgres:5432/musicconnect
      REDIS_URL: redis://:musicconnect_dev_password@redis:6379
      JWT_SECRET: dev_jwt_secret_change_in_production
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-sk_test_placeholder}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-placeholder}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-placeholder}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      S3_BUCKET: ${S3_BUCKET:-musicconnect-dev}
    ports:
      - "8080:8080"
      - "8081:8081"
    volumes:
      - ../../backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - musicconnect

  # WebSocket Server
  websocket:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.websocket
    container_name: musicconnect-websocket
    environment:
      NODE_ENV: development
      PORT: 8082
      REDIS_URL: redis://:musicconnect_dev_password@redis:6379
      JWT_SECRET: dev_jwt_secret_change_in_production
    ports:
      - "8082:8080"
      - "8083:8082"
    volumes:
      - ../../backend:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - musicconnect

  # Frontend
  frontend:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile.frontend
      args:
        REACT_APP_API_URL: http://localhost:8080
        REACT_APP_STRIPE_PUBLIC_KEY: ${STRIPE_PUBLIC_KEY:-pk_test_placeholder}
        REACT_APP_CLOUDFRONT_URL: http://localhost:3000
    container_name: musicconnect-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - musicconnect

  # MinIO (S3-compatible storage for local development)
  minio:
    image: minio/minio:latest
    container_name: musicconnect-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - musicconnect

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: musicconnect-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - musicconnect

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: musicconnect-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - musicconnect

networks:
  musicconnect:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data: