apiVersion: v1
kind: ConfigMap
metadata:
  name: musicconnect-frontend-config
  namespace: musicconnect
  labels:
    app: musicconnect
    app.kubernetes.io/name: musicconnect-frontend-config
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: musicconnect
data:
  stripe-public-key: "pk_live_YOUR_STRIPE_PUBLIC_KEY"
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /var/log/nginx/access.log main;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 100M;

        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml;

        server {
            listen 80;
            server_name _;
            root /usr/share/nginx/html;
            index index.html;

            location / {
                try_files $uri $uri/ /index.html;
            }

            location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }

            location = /health {
                access_log off;
                return 200 "healthy\n";
            }
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: musicconnect-backend-config
  namespace: musicconnect
  labels:
    app: musicconnect
    app.kubernetes.io/name: musicconnect-backend-config
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: musicconnect
data:
  cors-allowed-origins: "https://musicconnect.com,https://www.musicconnect.com"
  max-upload-size: "104857600" # 100MB
  jwt-expiry: "86400" # 24 hours
  rate-limit-window: "60000" # 1 minute
  rate-limit-max: "100"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: musicconnect-monitoring-config
  namespace: musicconnect-monitoring
  labels:
    app: musicconnect
    app.kubernetes.io/name: musicconnect-monitoring-config
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: musicconnect
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    scrape_configs:
    - job_name: 'kubernetes-pods'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - musicconnect
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name