name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      region:
        description: 'Deployment region'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - us-east-1
          - us-west-2
          - eu-west-1
          - ap-southeast-1

env:
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  DOCKER_BUILDKIT: 1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run backend tests
        run: cd backend && npm run test:ci

      - name: Run frontend tests
        run: cd frontend && npm run test:ci

      - name: Run security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'

  build:
    name: Build and Push Images
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend, websocket]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/Dockerfile.${{ matrix.service }}
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/musicconnect-${{ matrix.service }}:${{ github.sha }}
            ${{ env.ECR_REGISTRY }}/musicconnect-${{ matrix.service }}:latest
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/musicconnect-${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.ECR_REGISTRY }}/musicconnect-${{ matrix.service }}:buildcache,mode=max
          build-args: |
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
            REACT_APP_STRIPE_PUBLIC_KEY=${{ secrets.REACT_APP_STRIPE_PUBLIC_KEY }}
            REACT_APP_CLOUDFRONT_URL=${{ secrets.REACT_APP_CLOUDFRONT_URL }}

  deploy:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [us-east-1, us-west-2, eu-west-1, ap-southeast-1]
    if: github.event.inputs.region == 'all' || github.event.inputs.region == matrix.region
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name musicconnect-${{ matrix.region }}-eks --region ${{ matrix.region }}

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Update image tags
        run: |
          cd infrastructure/kubernetes/overlays/${{ matrix.region }}
          kustomize edit set image \
            musicconnect/backend=${{ env.ECR_REGISTRY }}/musicconnect-backend:${{ github.sha }} \
            musicconnect/frontend=${{ env.ECR_REGISTRY }}/musicconnect-frontend:${{ github.sha }} \
            musicconnect/websocket=${{ env.ECR_REGISTRY }}/musicconnect-websocket:${{ github.sha }}

      - name: Deploy to Kubernetes (Blue-Green)
        run: |
          # Deploy new version with green label
          cd infrastructure/kubernetes/overlays/${{ matrix.region }}
          kustomize build . | kubectl apply -f - --selector=version=green
          
          # Wait for rollout
          kubectl rollout status deployment/musicconnect-backend -n musicconnect --timeout=10m
          kubectl rollout status deployment/musicconnect-frontend -n musicconnect --timeout=10m
          kubectl rollout status deployment/musicconnect-websocket -n musicconnect --timeout=10m
          
          # Run smoke tests
          ./scripts/smoke-test.sh ${{ matrix.region }}
          
          # Switch traffic to green
          kubectl patch service musicconnect-backend -n musicconnect -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service musicconnect-frontend -n musicconnect -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service musicconnect-websocket -n musicconnect -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Delete old blue deployment
          kubectl delete deployment -l version=blue -n musicconnect

      - name: Verify deployment
        run: |
          kubectl get pods -n musicconnect
          kubectl get svc -n musicconnect
          kubectl get hpa -n musicconnect

  update-cdn:
    name: Update CloudFront
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event.inputs.region == 'all'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  notify:
    name: Send Notifications
    needs: [deploy, update-cdn]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ github.event.inputs.region || 'all regions' }} ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}